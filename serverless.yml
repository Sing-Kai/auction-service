service: auction-service

plugins:
  - serverless-iam-roles-per-function

provider:
  name: aws
  runtime: nodejs18.x
  memorySize: 256
  stage: ${opt:stage, 'dev'}
  region: eu-west-1
  environment:
    MAIL_QUEUE_URL: ${self:custom.MailQueue.url}
  iam:
    role:
      statements:
        - ${file(./iam/AuctionsTableIAM.yml):AuctionsTableIAM} 
        - ${file(./iam/MailQueueIAM.yml):MailQueueIAM}

resources:
  Resources:
    AuctionsTable: ${file(./resources/AuctionsTable.yml):AuctionsTable} 

functions:
  createAuction:
    handler: src/handlers/createAuction.handler
    events:
      - http:
          method: POST
          path: /auction
          authorizer: arn:aws:lambda:eu-west-1:394226462971:function:auth-service-dev-auth

  getAuctions:
    handler: src/handlers/getAuctions.handler
    events:
      - http:
          method: GET
          path: /auctions 
          authorizer: arn:aws:lambda:eu-west-1:394226462971:function:auth-service-dev-auth    

  getAuction:
    handler: src/handlers/getAuction.handler
    events:
      - http:
          method: GET
          path: /auction/{id}   
          authorizer: arn:aws:lambda:eu-west-1:394226462971:function:auth-service-dev-auth

  placeBid:
    handler: src/handlers/placeBid.handler
    events:
      - http:
          method: PATCH
          path: /auction/{id}/bid 
          authorizer: arn:aws:lambda:eu-west-1:394226462971:function:auth-service-dev-auth

  processAuctions:
    handler: src/handlers/processAuctions.handler
    # events:
    #   - schedule: rate(2 minutes)            

custom:
  AuctionsTable:
    name: !Ref AuctionsTable
    arn:  !GetAtt AuctionsTable.Arn
  MailQueue:
    arn: ${cf:notification-service-${self:provider.stage}.MailQueueArn}
    url: ${cf:notification-service-${self:provider.stage}.MailQueueUrl}
  bundle:
    linting: false  